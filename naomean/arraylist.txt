Hereâ€™s a summary of the most commonly used commands (methods) for working with ArrayList in Java:

Basic Operations
Add Elements

add(E element)
Adds the specified element to the end of the list.
java
Copy code
ArrayList<String> list = new ArrayList<>();
list.add("Apple");
add(int index, E element)
Inserts the specified element at the specified position.
java
Copy code
list.add(1, "Banana");
Access Elements

get(int index)
Returns the element at the specified index.
java
Copy code
String fruit = list.get(0); // "Apple"
Update Elements

set(int index, E element)
Replaces the element at the specified index with the specified element.
java
Copy code
list.set(0, "Orange"); // Replaces "Apple" with "Orange"
Remove Elements

remove(int index)
Removes the element at the specified position.
java
Copy code
list.remove(1); // Removes the element at index 1
remove(Object o)
Removes the first occurrence of the specified element.
java
Copy code
list.remove("Apple");
Clear All Elements

clear()
Removes all elements from the list.
java
Copy code
list.clear();
Check Properties
Check if Empty

isEmpty()
Returns true if the list contains no elements.
java
Copy code
boolean isEmpty = list.isEmpty();
Check Size

size()
Returns the number of elements in the list.
java
Copy code
int size = list.size();
Check if Contains

contains(Object o)
Returns true if the list contains the specified element.
java
Copy code
boolean hasApple = list.contains("Apple");
Get Index

indexOf(Object o)
Returns the index of the first occurrence of the specified element, or -1 if not found.

java
Copy code
int index = list.indexOf("Apple");
lastIndexOf(Object o)
Returns the index of the last occurrence of the specified element.

java
Copy code
int lastIndex = list.lastIndexOf("Apple");
Iterate through Elements
Using a for loop

java
Copy code
for (int i = 0; i < list.size(); i++) {
    System.out.println(list.get(i));
}
Using a for-each loop

java
Copy code
for (String fruit : list) {
    System.out.println(fruit);
}
Using an Iterator

java
Copy code
Iterator<String> iterator = list.iterator();
while (iterator.hasNext()) {
    System.out.println(iterator.next());
}
Using Streams (Java 8+)

java
Copy code
list.stream().forEach(System.out::println);
Other Useful Methods
Convert to Array

toArray()
Converts the list to an array.
java
Copy code
Object[] array = list.toArray();
Sort Elements

Collections.sort(List<E> list)
Sorts the elements in natural order.
java
Copy code
Collections.sort(list);
Sublist

subList(int fromIndex, int toIndex)
Returns a view of the portion of the list between fromIndex (inclusive) and toIndex (exclusive).
java
Copy code
List<String> subList = list.subList(1, 3);
Replace All Elements

replaceAll(UnaryOperator<E> operator)
Replaces each element using the specified function.
java
Copy code
list.replaceAll(String::toUpperCase); // Converts all elements to uppercase
Remove If Condition

removeIf(Predicate<? super E> filter)
Removes elements based on the specified condition.
java
Copy code
list.removeIf(fruit -> fruit.startsWith("A")); // Removes elements starting with "A"
Ensure Capacity

ensureCapacity(int minCapacity)
Ensures the capacity of the ArrayList is at least minCapacity.
java
Copy code
list.ensureCapacity(50);
Example
java
Copy code
import java.util.ArrayList;
import java.util.Collections;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        
        // Add elements
        list.add("Apple");
        list.add("Banana");
        list.add("Cherry");
        
        // Access elements
        System.out.println("First element: " + list.get(0));
        
        // Update elements
        list.set(1, "Blueberry");
        
        // Remove elements
        list.remove("Cherry");
        
        // Check properties
        System.out.println("List contains 'Apple': " + list.contains("Apple"));
        System.out.println("List size: " + list.size());
        
        // Sort and display
        Collections.sort(list);
        System.out.println("Sorted list: " + list);
        
        // Iterate using for-each
        System.out.println("All elements:");
        for (String fruit : list) {
            System.out.println(fruit);
        }
    }
}
Output
yaml
Copy code
First element: Apple
List contains 'Apple': true
List size: 2
Sorted list: [Apple, Blueberry]
All elements:
Apple
Blueberry